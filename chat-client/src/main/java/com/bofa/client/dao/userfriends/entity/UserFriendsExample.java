package com.bofa.client.dao.userfriends.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class UserFriendsExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    public UserFriendsExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andUserfriendidIsNull() {
            addCriterion("USERFRIENDID is null");
            return (Criteria) this;
        }

        public Criteria andUserfriendidIsNotNull() {
            addCriterion("USERFRIENDID is not null");
            return (Criteria) this;
        }

        public Criteria andUserfriendidEqualTo(Integer value) {
            addCriterion("USERFRIENDID =", value, "userFriendId");
            return (Criteria) this;
        }

        public Criteria andUserfriendidNotEqualTo(Integer value) {
            addCriterion("USERFRIENDID <>", value, "userFriendId");
            return (Criteria) this;
        }

        public Criteria andUserfriendidGreaterThan(Integer value) {
            addCriterion("USERFRIENDID >", value, "userFriendId");
            return (Criteria) this;
        }

        public Criteria andUserfriendidGreaterThanOrEqualTo(Integer value) {
            addCriterion("USERFRIENDID >=", value, "userFriendId");
            return (Criteria) this;
        }

        public Criteria andUserfriendidLessThan(Integer value) {
            addCriterion("USERFRIENDID <", value, "userFriendId");
            return (Criteria) this;
        }

        public Criteria andUserfriendidLessThanOrEqualTo(Integer value) {
            addCriterion("USERFRIENDID <=", value, "userFriendId");
            return (Criteria) this;
        }

        public Criteria andUserfriendidIn(List<Integer> values) {
            addCriterion("USERFRIENDID in", values, "userFriendId");
            return (Criteria) this;
        }

        public Criteria andUserfriendidNotIn(List<Integer> values) {
            addCriterion("USERFRIENDID not in", values, "userFriendId");
            return (Criteria) this;
        }

        public Criteria andUserfriendidBetween(Integer value1, Integer value2) {
            addCriterion("USERFRIENDID between", value1, value2, "userFriendId");
            return (Criteria) this;
        }

        public Criteria andUserfriendidNotBetween(Integer value1, Integer value2) {
            addCriterion("USERFRIENDID not between", value1, value2, "userFriendId");
            return (Criteria) this;
        }

        public Criteria andUseridIsNull() {
            addCriterion("USERID is null");
            return (Criteria) this;
        }

        public Criteria andUseridIsNotNull() {
            addCriterion("USERID is not null");
            return (Criteria) this;
        }

        public Criteria andUseridEqualTo(Integer value) {
            addCriterion("USERID =", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUseridNotEqualTo(Integer value) {
            addCriterion("USERID <>", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUseridGreaterThan(Integer value) {
            addCriterion("USERID >", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUseridGreaterThanOrEqualTo(Integer value) {
            addCriterion("USERID >=", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUseridLessThan(Integer value) {
            addCriterion("USERID <", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUseridLessThanOrEqualTo(Integer value) {
            addCriterion("USERID <=", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUseridIn(List<Integer> values) {
            addCriterion("USERID in", values, "userId");
            return (Criteria) this;
        }

        public Criteria andUseridNotIn(List<Integer> values) {
            addCriterion("USERID not in", values, "userId");
            return (Criteria) this;
        }

        public Criteria andUseridBetween(Integer value1, Integer value2) {
            addCriterion("USERID between", value1, value2, "userId");
            return (Criteria) this;
        }

        public Criteria andUseridNotBetween(Integer value1, Integer value2) {
            addCriterion("USERID not between", value1, value2, "userId");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameIsNull() {
            addCriterion("USERFRIENDNAME is null");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameIsNotNull() {
            addCriterion("USERFRIENDNAME is not null");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameEqualTo(String value) {
            addCriterion("USERFRIENDNAME =", value, "userFriendName");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameNotEqualTo(String value) {
            addCriterion("USERFRIENDNAME <>", value, "userFriendName");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameGreaterThan(String value) {
            addCriterion("USERFRIENDNAME >", value, "userFriendName");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameGreaterThanOrEqualTo(String value) {
            addCriterion("USERFRIENDNAME >=", value, "userFriendName");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameLessThan(String value) {
            addCriterion("USERFRIENDNAME <", value, "userFriendName");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameLessThanOrEqualTo(String value) {
            addCriterion("USERFRIENDNAME <=", value, "userFriendName");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameLike(String value) {
            addCriterion("USERFRIENDNAME like", value, "userFriendName");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameNotLike(String value) {
            addCriterion("USERFRIENDNAME not like", value, "userFriendName");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameIn(List<String> values) {
            addCriterion("USERFRIENDNAME in", values, "userFriendName");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameNotIn(List<String> values) {
            addCriterion("USERFRIENDNAME not in", values, "userFriendName");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameBetween(String value1, String value2) {
            addCriterion("USERFRIENDNAME between", value1, value2, "userFriendName");
            return (Criteria) this;
        }

        public Criteria andUserfriendnameNotBetween(String value1, String value2) {
            addCriterion("USERFRIENDNAME not between", value1, value2, "userFriendName");
            return (Criteria) this;
        }

        public Criteria andLastchattimeIsNull() {
            addCriterion("LASTCHATTIME is null");
            return (Criteria) this;
        }

        public Criteria andLastchattimeIsNotNull() {
            addCriterion("LASTCHATTIME is not null");
            return (Criteria) this;
        }

        public Criteria andLastchattimeEqualTo(Date value) {
            addCriterion("LASTCHATTIME =", value, "lastChatTime");
            return (Criteria) this;
        }

        public Criteria andLastchattimeNotEqualTo(Date value) {
            addCriterion("LASTCHATTIME <>", value, "lastChatTime");
            return (Criteria) this;
        }

        public Criteria andLastchattimeGreaterThan(Date value) {
            addCriterion("LASTCHATTIME >", value, "lastChatTime");
            return (Criteria) this;
        }

        public Criteria andLastchattimeGreaterThanOrEqualTo(Date value) {
            addCriterion("LASTCHATTIME >=", value, "lastChatTime");
            return (Criteria) this;
        }

        public Criteria andLastchattimeLessThan(Date value) {
            addCriterion("LASTCHATTIME <", value, "lastChatTime");
            return (Criteria) this;
        }

        public Criteria andLastchattimeLessThanOrEqualTo(Date value) {
            addCriterion("LASTCHATTIME <=", value, "lastChatTime");
            return (Criteria) this;
        }

        public Criteria andLastchattimeIn(List<Date> values) {
            addCriterion("LASTCHATTIME in", values, "lastChatTime");
            return (Criteria) this;
        }

        public Criteria andLastchattimeNotIn(List<Date> values) {
            addCriterion("LASTCHATTIME not in", values, "lastChatTime");
            return (Criteria) this;
        }

        public Criteria andLastchattimeBetween(Date value1, Date value2) {
            addCriterion("LASTCHATTIME between", value1, value2, "lastChatTime");
            return (Criteria) this;
        }

        public Criteria andLastchattimeNotBetween(Date value1, Date value2) {
            addCriterion("LASTCHATTIME not between", value1, value2, "lastChatTime");
            return (Criteria) this;
        }

        public Criteria andRemarkIsNull() {
            addCriterion("REMARK is null");
            return (Criteria) this;
        }

        public Criteria andRemarkIsNotNull() {
            addCriterion("REMARK is not null");
            return (Criteria) this;
        }

        public Criteria andRemarkEqualTo(String value) {
            addCriterion("REMARK =", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkNotEqualTo(String value) {
            addCriterion("REMARK <>", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkGreaterThan(String value) {
            addCriterion("REMARK >", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkGreaterThanOrEqualTo(String value) {
            addCriterion("REMARK >=", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkLessThan(String value) {
            addCriterion("REMARK <", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkLessThanOrEqualTo(String value) {
            addCriterion("REMARK <=", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkLike(String value) {
            addCriterion("REMARK like", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkNotLike(String value) {
            addCriterion("REMARK not like", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkIn(List<String> values) {
            addCriterion("REMARK in", values, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkNotIn(List<String> values) {
            addCriterion("REMARK not in", values, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkBetween(String value1, String value2) {
            addCriterion("REMARK between", value1, value2, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkNotBetween(String value1, String value2) {
            addCriterion("REMARK not between", value1, value2, "remark");
            return (Criteria) this;
        }

        public Criteria andIntIsNull() {
            addCriterion("INT is null");
            return (Criteria) this;
        }

        public Criteria andIntIsNotNull() {
            addCriterion("INT is not null");
            return (Criteria) this;
        }

        public Criteria andIntEqualTo(Object value) {
            addCriterion("INT =", value, "int");
            return (Criteria) this;
        }

        public Criteria andIntNotEqualTo(Object value) {
            addCriterion("INT <>", value, "int");
            return (Criteria) this;
        }

        public Criteria andIntGreaterThan(Object value) {
            addCriterion("INT >", value, "int");
            return (Criteria) this;
        }

        public Criteria andIntGreaterThanOrEqualTo(Object value) {
            addCriterion("INT >=", value, "int");
            return (Criteria) this;
        }

        public Criteria andIntLessThan(Object value) {
            addCriterion("INT <", value, "int");
            return (Criteria) this;
        }

        public Criteria andIntLessThanOrEqualTo(Object value) {
            addCriterion("INT <=", value, "int");
            return (Criteria) this;
        }

        public Criteria andIntIn(List<Object> values) {
            addCriterion("INT in", values, "int");
            return (Criteria) this;
        }

        public Criteria andIntNotIn(List<Object> values) {
            addCriterion("INT not in", values, "int");
            return (Criteria) this;
        }

        public Criteria andIntBetween(Object value1, Object value2) {
            addCriterion("INT between", value1, value2, "int");
            return (Criteria) this;
        }

        public Criteria andIntNotBetween(Object value1, Object value2) {
            addCriterion("INT not between", value1, value2, "int");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated do_not_delete_during_merge 2019-04-20 22:25:47
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table USER_FRIENDS
     *
     * @mbg.generated 2019-04-20 22:25:47
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}